buildscript {
    repositories {
        jcenter()
        maven {
            name = "Forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "Sonatype"
            url = 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath 'com.matthewprenger:CurseGradle:1.0-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'

apply from: 'https://gist.githubusercontent.com/UpcraftLP/0a98a7dfe913bd3e99073efa7ad0353b/raw/mod_script.gradle'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.
import java.time.Year

def username = project.modid
if (project.hasProperty('dev_mail')) {
    username = findProperty('dev_mail')
}
else if (project.hasProperty('dev_username')) {
    username = findProperty('dev_username')
}

def buildVersion = project.mod_version + ext.buildName
version = "${project.mc_version}-" + buildVersion
def change_log = ext.changeLog


tasks.build.doLast {
    println("Current version is ${maven_artifact}-${version}")
    println("Changelog:")
    println(change_log)
}

group = project.maven_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.maven_artifact

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8 // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    maven {
        //JEI files
        //Mantle
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "http://modmaven.k-4u.nl"
    }

    maven {
        //fallback for almost everything, this is CurseForge :P
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }

    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

minecraft {
    version = "${project.mc_version}-${project.forge_version}"
    if (project.hasProperty('runDir')) {
        runDir = findProperty('runDir')
    }
    else if (file('../run').exists()) {
        runDir = "../run"
    }
    else {
        runDir = "run"
    }
    println('run directory: ' + runDir.toString())

    mappings = project.forge_mappings
    if("${mappings}" != "${project.ext.mappings}") {
        println(String.format("You are on old mappings, latest mappings are %s (you are on %s)", project.ext.mappings, mappings))
    }
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	
	replace "@VERSION@", buildVersion
    def fingerPrintKey = project.hasProperty('public_key') ? findProperty('public_key').replace(":", "").toLowerCase(Locale.ROOT) : "undefined"
    replace "@FINGERPRINTKEY@", fingerPrintKey
    replace "@UPDATE_JSON@", project.update_json
    replaceIn "${project.reference_class}".replace(".", "/") + ".java"

    //auto-configure the run arguments
    if(project.hasProperty('dev_uuid')) {
        clientRunArgs += "--uuid=${dev_uuid}"
    }
    else {
        clientRunArgs += "--username=${username}"
        if(project.hasProperty('dev_password')) clientRunArgs += "--password=${dev_password}"
    }

    //skip the screen to confirm that you want to load a world with missing registry entries
    serverJvmArgs += "-Dfml.doNotBackup=true"
    clientJvmArgs += "-Dfml.doNotBackup=true"

    // skip having to confirm on server
    serverJvmArgs += "-Dfml.queryResult=confirm"

    // disable server gui
    serverRunArgs += "nogui"

    //skip jansi warnings in the log
    serverJvmArgs += '-Dlog4j.skipJansi=true'
    clientJvmArgs += '-Dlog4j.skipJansi=true'
}

sourceSets {
	
	main {
		java {
			srcDir 'src/main/java'
		}
		resources {
			srcDir 'resources'
		}
	}
}

jar {
    from "LICENSE"
    manifest.mainAttributes(
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.mod_version}",
            "Built-On": "${project.mc_version}-${project.forge_version}",
            "Timestamp": new Date().getTime(),
            "Maven-Artifact":"${project.group}:${project.archivesBaseName}:${project.version}"
            //"FMLAT": "${project.modid}_at.cfg"
    )
    classifier '' //this is the main jar!
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

dependencies {

    //JEI (runtime only)
    runtime "mezz.jei:jei_${project.mc_version}:${project.jei_version}"

    deobfCompile "com.github.Ladysnake:gaspunk:${project.gp_version}"
    //runtime "com.github.Ladysnake:Ladylib:${project.ll_version}" //required for gaspunk

    deobfCompile "craftdev-core:craftdev-core:${project.mc_version}:${project.core_version}"

}
tasks.build.dependsOn signJar
tasks.curseforge.dependsOn build

def curseRelations = {
    requiredLibrary 'gaspunk'
    optionalLibrary 'craftdev-core' //add curseforge-slug here
}


curseforge {
    if (project.hasProperty('curse_key'))
        apiKey = project.curse_key

    if(project.hasProperty('curse_id')) {
        project {
            id = project.curse_id
            changelogType = 'markdown'
            changelog = change_log
            releaseType = project.release_type

            relations curseRelations

            //no such jars for now
            //addArtifact javadocJar
            //addArtifact sourceJar
            //addArtifact apiJar

            //addGameVersion '1.12'
            //addGameVersion '1.12.1'
            //addGameVersion '1.12.2'

            mainArtifact(jar) {
                displayName = "${project.mod_name} v${project.mod_version} MC${project.mc_version}"
            }
        }
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'name':project.mod_name, 'description':project.mod_description, 'version':project.mod_version, 'mcversion':project.minecraft.version, 'url':project.url, 'updateUrl':project.update_json, 'year':String.valueOf(Year.now().getValue())
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
	
	//ATs
	rename '(.+_at.cfg)', 'META-INF/$1'
}
